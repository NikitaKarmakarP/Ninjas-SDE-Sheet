import java.util.HashMap;

import java.util.Map;

 

public class Solution {

    class LFUCache {

 

        final int capacity;

        int curSize, minFreq;

 

        Map<Integer, DLLNode> cache;

        Map<Integer, DLL> freqMap;

        

        LFUCache(int capacity) {

            this.capacity = capacity;

            this.curSize = 0;

            this.minFreq = 0;

            this.cache = new HashMap<>();

            this.freqMap = new HashMap<>();

        }

 

        public int get(int key) {

            DLLNode curNode = cache.get(key);

            if (curNode == null) return -1;

 

            updateNode(curNode);

            return curNode.val;

        }

 

        public void put(int key, int value) {

            if (capacity == 0) return;

 

            if (cache.containsKey(key)) {

                DLLNode curNode = cache.get(key);

                curNode.val = value;

                updateNode(curNode);

            } else {

                curSize++;

                if (curSize > capacity) {

                    DLL minFreqList = freqMap.get(minFreq);

                    cache.remove(minFreqList.tail.prev.key);

                    minFreqList.removeNode(minFreqList.tail.prev);

                    curSize--;

                }

                minFreq = 1;

                DLLNode newNode = new DLLNode(key, value);

                DLL curList = freqMap.getOrDefault(1, new DLL());

                curList.addNode(newNode);

                freqMap.put(1, curList);

                cache.put(key, newNode);

            }

        }

 

        private void updateNode(DLLNode curNode) {

            int curFreq = curNode.frequency;

 

            DLL curList = freqMap.get(curFreq);

            curList.removeNode(curNode);

 

            if (curFreq == minFreq && curList.listSize == 0) {

                minFreq++;

            }

            curNode.frequency++;

 

            DLL newList = freqMap.getOrDefault(curNode.frequency, new DLL());

            newList.addNode(curNode);

            freqMap.put(curNode.frequency, newList);

        }

 

        class DLLNode {

            int key, val, frequency;

            DLLNode prev, next;

 

            public DLLNode(int key, int val) {

                this.key = key;

                this.val = val;

                this.frequency = 1;

            }

        }

 

        class DLL {

            int listSize;

            DLLNode head, tail;

 

            public DLL() {

                this.listSize = 0;

                this.head = new DLLNode(0, 0);

                this.tail = new DLLNode(0, 0);

                head.next = tail;

                tail.prev = head;

            }

 

            public void addNode(DLLNode curNode) {

                DLLNode nextNode = head.next;

                curNode.next = nextNode;

                curNode.prev = head;

                head.next = curNode;

                nextNode.prev = curNode;

                listSize++;

            }

 

            public void removeNode(DLLNode curNode) {

                DLLNode preNode = curNode.prev;

                DLLNode nextNode = curNode.next;

 

                preNode.next = nextNode;

                nextNode.prev = preNode;

                listSize--;

            }

        }

    }

}
